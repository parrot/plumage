=begin pod

=head1 Adding Tests

This document lists a few general conventions that will make it easier for
developers to work together on the test suite.

=head2 Test File Name

Test files should be named as follows:

=begin code

    (01-09)-foo.t              Basic tests of low-level infrastructure
    (10-49)-lib-plumage-foo.t  Tests for Plumage::Foo libraries in layer order
    (50-99)-plumage-type.t     Various types of tests for the Plumage CLI tool

=end code

=head2 Test File Layout

Each new test file should follow the same basic layout as seen in the
F<t/03-util.t> test file: a standard C<MAIN()> subroutine that loads Parrot's
C<Test::More> implementation and the library (if any) that will be tested,
and then hands execution off to a basic C<run_tests()> subroutine that declares
a plan and calls each testing subroutine in sequence.

These testing subroutines should be named C<test_>I<whatever>C<()>, where
I<whatever> is the name of the subroutine, variable, or command that is
being tested. They should follow right after C<run_tests()> with any helper
subroutines right after the subroutines they help.

Testing subroutines should appear in the same order in C<run_tests()> that
they appear in the rest of the file, and this order should also roughly match
the order the tested items appear in the library or program source; of course,
sometimes it will make more sense to test things slightly out of order
(testing a file write subroutine before a file read subroutine, for instance,
even though the read subroutine appears first in the library source).

=head2 Testing Tools

We use Parrot's C<Test::More> implementation but in a few cases its
PIR-based design shows through and NQP provides better native tools.

In particular:

=item Instead of C<like()>, please use C<ok()> with a native NQP-rx
C<$string ~~ /regex/> match.

=item Instead of C<lives_ok()>, C<dies_ok()>, or C<throws_like()>, please use
the native NQP-rx C<try {}> and/or C<CATCH {}>.

If you do end up using a C<Test::More> subroutine not already sanity-checked
in F<t/01-sanity.t>, please add a quick test there as well just to verify that
we know what happened if a future change in Parrot breaks the test suite.

=end pod
