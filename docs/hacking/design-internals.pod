=begin pod

=head1 Internal Design

Plumage is designed as a set of layered libraries providing the bulk of
its functionality underneath a thin, replaceable user interface layer.
At this time, Plumage ships with only one default interface, the C<plumage>
command-line tool.

The Plumage stack currently looks like this:

=begin code

    ,---------------------------------------------------.
    |                User Interface                     |
    |  ,------------------.  ,-----------------------.  |
    |  | Plumage::Project |  | Plumage::Dependencies |  |
    |  |  ,---------------+--+--------------------.  |  |
    |  |  |         Plumage::Metadata             |  |  |
    +--+--+---------------------------------------+--+--+
    |               Plumage::NQPUtil                    |
    +---------------------------------------------------+
    |   Parrot Libraries    | Parrot Languages          |
    |                       |                           |
    |   * dumper            | * NQP-rx                  |
    |   * P6object          | * PIR                     |
    |   * Getopt::Obj       | * data_json               |
    |   * Config::JSON      |                           |
    `---------------------------------------------------'

=end code

It is intended that as Plumage's functionality grows, more libraries (and
probably more layers) will be added in the C<Plumage::*> namespace. There
has also been some discussion of merging C<Plumage::NQPUtil> or its
functional equivalent into Kakapo, the standard library project for NQP-rx.

=head1 Component Overviews

The following sections give a mild overview of each major component from the
C<Plumage::NQPUtil> layer on up. There are some additional details for
particular pieces available in other documents that are noted below. For more
details, read the source code or visit C<#parrot> on C<irc.parrot.org> and
we'll be happy to help you.

=head2 C<Plumage::NQPUtil>

This component provides a very simple library of common subroutines to all of
the layers above it. These range from functional constructs like C<grep>,
C<map>, and C<reduce>, to portable system utilities like C<find_program>,
C<mkpath>, and C<qx>, to generally useful tools like C<eval>, C<slurp>, and
C<subst>.

In addition, C<Plumage::NQPUtil> provides the magic that sets up the
"interpreter globals", such as C<$*PROGRAM_NAME>, C<@*ARGS>, and C<%*VM>.

=head2 C<Plumage::Metadata>

All of the logic to load, parse, and validate Plumage metadata is concentrated
in this module. It is also responsible for performing searches and queries on
the metadata collection.

=head2 C<Plumage::Project>

This module collects the important information about a project in one place
- metadata, project directory, etc. It also contains the logic for performing
actions on a project, such as fetching the source code, building binaries, and
running tests.

Adding a new action to the available project actions is described in the
L<Adding a New Project Action|add-action.pod> document.

=head2 C<Plumage::Dependencies>

Plumage projects can have many interlocking dependencies, both to other Plumage
projects and to external items such as system binaries and standard build
tools. This module contains the dependency resolver that makes sense of the web
of dependencies and determines what must be done to resolve all unmet
dependencies.

=head2 User Interface

The user interface is intended to be as thin as possible, merely containing the
necessary logic to perform directly user-facing subroutines such as parsing the
user's input, showing feedback, displaying query results, and giving help.

Adding a new command to the F<plumage> command-line tool is described in the
L<Adding a New Command|add-command.pod> document.

=end pod
