
our @ARGS;
MAIN();

# TAP grammar in ABNF
# http://testanything.org/wiki/index.php/TAP_at_IETF:_Draft_Standard#Grammar

sub MAIN () {
    load_bytecode('src/lib/Glue.pir');
    for @ARGS {
        my $file := slurp($_);
        my $filename := $_;
        print($filename ~ '...');
        my $test_output := Q:PIR {
            .local string cmd
            .local pmc pio
            $P0 = find_lex '$filename'
            $S0 = $P0
            cmd = 'parrot_nqp ' . $S0
            pio = open cmd, 'rp'
            unless pio goto err_qx
            pio.'encoding'('utf8')
            $P0 = pio.'readall'()
            pio.'close'()
            %r = $P0

          err_qx:
            unless pio goto done
            say 'bad shit'
          done:
        };
        my $output    := split("\n",$test_output);
        my @nums      := split('..',$output[0]);
        my $num_tests := @nums[1];
        my $curr_test := 0;
        my $passed    := 0;
        my $failed    := 0;
        #print("test_output=" ~ $test_output );

        $output.shift;

        for $output {
            my $line := $_;
            #say("line= " ~ $line );
            #say("line length=" ~ length($line) );
            if( $line ) {
                $curr_test++;
                my $line_parts := split('ok ',$line);
                if ($line_parts[0] eq 'not ') {
                    #say("failed test " ~ $curr_test);
                    $failed++;
                } elsif ($line_parts[1] == $curr_test) {
                    #say("passed test " ~ $curr_test);
                    $passed++;
                }
            }
        }
        if ($failed) {
            say('failed');
        } else {
            say('passed');
        }
        if( $num_tests != $curr_test ) {
            say("Planned to run " ~ $num_tests ~ " tests but ran " ~ $curr_test ~ " tests");
            say("FAILED");
        } else {
            if ($failed) {
                say("FAILED " ~ $failed ~ "/" ~ $curr_test ~ " tests");
            } else {
                say("PASSED " ~ $curr_test ~ " tests");
            }
        }
    }
}
