### Looking for something to work on?  See TASKS.
###
### This file is more of a "don't forget to do this" list.


Study:
------
* CPAN META/MYMETA changes afoot
* proto changes afoot
* Haskell Cabal
* Ruby Rake
* ExtUtils::Liblist


Metadata:
---------
* general
  * Easy way to reference CREDITS file in contributors key?
  * Repo fetches from tip have version 'HEAD'
* instructions
  * 'fetch' of a repository should have 'repository' as its type
  * 'type's must have underscores, not hyphens
  * Special case of configure type for accepting --parrot-config option?
  * What about update and cleanup?
  * What about multiple instructions per key?
    * Allow value to be either hash or array of hashes?
* dependency-info
  * 'provides' is always an array
  * HLLs provide their project name and their language name
* resources
  * feed_type and feed_uri for hosting that provides Atom/RSS commit feeds


Plumage:
--------
* Hosting:
  * allison looking into parrot.org
  * moritz gave access to a Debian Lenny box
* Functionality:
  * Help
    * Real manpage
    * help command
    * --help, -h, -? options
  * System and local installs
    * Where should local installs go by default?
    * How to make parrot aware of local install path?
  * Platform hints
    * config items not provided by parrot, like PATH separator
    * binary renames
  * Anything proto can do
    * Meaningful exit codes
    * Quiet modes: Log, Silent, Verbose
      * If progress bars, use N * Width / (N + Width) to determine length
      * Interaction with sudo?
      * Other prompts?
    * Create new project helper
    * 'update' command
    * 'uninstall' or 'remove' command
    * 'fetch' able to do owner-clone for git repos
      * User able to specify list of authorities they have commitbits for?
    * 'configure' able to run any of:
      * Makefile.PL
      * Configure.pl
      * Configure.p6
      * Configure
    * 'test' action using (recursive) 'prove' directly
    * 'all' pseudo-project
      * 'install all' is probably scaling out of reasonable range now
      * But 'update all' is reasonable
* Spec:
  * Add Stakeholders section
  * Add Usage Scenarios section
  * Author v. User dynamic dependency differences (aka META v. MYMETA)
  * DSLIP info in META?
  * Interoperate with pkg-config and/or ExtUtils::Liblist?
    * Use them to find system libs?  Or use their *algorithms* to do so?
      * #toolchain considered writing a Pure Perl pkg-config workalike
      * ExtUtils::PkgConfig exists ...
    * Generate .pc files if module install type does not automatically do so
    * Hmmm, seems to be some fail here WRT standardizing lib names ...
* Test Suite
  * Figure out how to mock svn/git repos so that build/fetch/test/configure
    steps can be tested
  * Check exit code of each test file
* Misc suggestions
  * Avoid asking questions (after first setup?) if at all possible
  * rake madness (from Cardinal):
    * rake clobber
    * git pull
    * PARROT_CONFIG={{parrot_dir whatever}}/parrot_config rake cardinal
    * rake test:all
* Suggestions from proto-ng team
  * $PREFIX defaults to $HOME/.ecosystem/lib
  * Rakudo doing:
    * [builtins/globals.pir] preload $HOME/.perl6lib and languages/perl6/lib in @*INC
    * $HOME/.perl6/lib + $HOME/.perl6/proto/config ?
    * parrot_install/bin + parrot_install/lib/1.5.0-devel/languages/perl6/
    * From #perl6:
      * mberends does not like adding directories to PATH
        mberends does 'sudo ln -s <parrot_install>/bin/perl6 /usr/local/bin' instead


Parrot:
-------
* Fixes needed:
  * More secure pipe spawn
    * current insecure version does 'sh', '-c', 'command and args'
  * Pipe spawn with exit code also
* Config values needed:
  * PATH separator
* Finish JSON -> data_json conversion
  * Change tests to use data_json language
  * Deprecate JSON language


NQP:
----
* HLL interop: allow NQP to be used by other languages
* Have to say 'our $OS;' to declare variable defined in Glue.pir
* How to create/set/use class attributes in NQP?
* Fix needing executable fix hack at top of file: Q:PIR{load_language 'nqp'};


data_json:
----------
* Less pedantic parse
  * Allow trailing comma in array and hash
  * Allow unquoted keys
* Better error messages!
